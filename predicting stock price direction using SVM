{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e76c2c60",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-03T21:23:43.485626Z",
     "iopub.status.busy": "2024-07-03T21:23:43.485184Z",
     "iopub.status.idle": "2024-07-03T21:23:44.443745Z",
     "shell.execute_reply": "2024-07-03T21:23:44.442519Z"
    },
    "papermill": {
     "duration": 0.967377,
     "end_time": "2024-07-03T21:23:44.446996",
     "exception": false,
     "start_time": "2024-07-03T21:23:43.479619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/reliance-data/Reliance.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "32ed1ffd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T21:23:44.456634Z",
     "iopub.status.busy": "2024-07-03T21:23:44.455727Z",
     "iopub.status.idle": "2024-07-03T21:23:44.516724Z",
     "shell.execute_reply": "2024-07-03T21:23:44.515384Z"
    },
    "papermill": {
     "duration": 0.068144,
     "end_time": "2024-07-03T21:23:44.519135",
     "exception": false,
     "start_time": "2024-07-03T21:23:44.450991",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  Open        High         Low       Close   Adj Close  \\\n",
      "Date                                                                     \n",
      "2015-11-18  463.799988  465.649994  454.975006  456.000000  436.671021   \n",
      "2015-11-19  459.450012  469.350006  458.625000  467.375000  447.563873   \n",
      "2015-11-20  467.000000  476.399994  462.774994  473.424988  453.357422   \n",
      "2015-11-23  475.000000  478.950012  473.100006  476.875000  456.661224   \n",
      "2015-11-24  476.500000  485.799988  475.524994  483.850006  463.340515   \n",
      "\n",
      "               Volume  \n",
      "Date                   \n",
      "2015-11-18  5142766.0  \n",
      "2015-11-19  5569752.0  \n",
      "2015-11-20  5167930.0  \n",
      "2015-11-23  4800026.0  \n",
      "2015-11-24  6768886.0  \n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "DatetimeIndex: 1233 entries, 2015-11-18 to 2020-11-17\n",
      "Data columns (total 6 columns):\n",
      " #   Column     Non-Null Count  Dtype  \n",
      "---  ------     --------------  -----  \n",
      " 0   Open       1232 non-null   float64\n",
      " 1   High       1232 non-null   float64\n",
      " 2   Low        1232 non-null   float64\n",
      " 3   Close      1232 non-null   float64\n",
      " 4   Adj Close  1232 non-null   float64\n",
      " 5   Volume     1232 non-null   float64\n",
      "dtypes: float64(6)\n",
      "memory usage: 67.4 KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# 1. Load the Reliance dataset\n",
    "# Replace 'reliance_data.csv' with the path to your actual CSV file.\n",
    "df = pd.read_csv('/kaggle/input/reliance-data/Reliance.csv')\n",
    "\n",
    "# Ensure 'Date' is of datetime type and set it as index\n",
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.set_index('Date', inplace=True)\n",
    "\n",
    "# Display the first few rows and structure of the dataset\n",
    "print(df.head())\n",
    "print(df.info())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11aba7e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T21:23:44.527195Z",
     "iopub.status.busy": "2024-07-03T21:23:44.526799Z",
     "iopub.status.idle": "2024-07-03T21:23:44.552138Z",
     "shell.execute_reply": "2024-07-03T21:23:44.551067Z"
    },
    "papermill": {
     "duration": 0.03294,
     "end_time": "2024-07-03T21:23:44.555369",
     "exception": false,
     "start_time": "2024-07-03T21:23:44.522429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  Open        High         Low       Close   Adj Close  \\\n",
      "Date                                                                     \n",
      "2015-12-16  487.950012  493.774994  486.750000  489.325012  468.583435   \n",
      "2015-12-17  490.024994  507.500000  489.000000  504.850006  483.450378   \n",
      "2015-12-18  501.899994  504.500000  495.000000  495.950012  474.927643   \n",
      "2015-12-21  493.950012  499.500000  492.174988  496.049988  475.023376   \n",
      "2015-12-22  496.399994  501.299988  492.000000  493.649994  472.725128   \n",
      "\n",
      "               Volume    Return      SMA_10      SMA_20       Lag_1  \\\n",
      "Date                                                                  \n",
      "2015-12-16  5530496.0  0.002818  478.222504  478.953752  487.950012   \n",
      "2015-12-17  8854870.0  0.031727  479.847504  481.396252  489.325012   \n",
      "2015-12-18  7322040.0 -0.017629  481.170004  482.825003  504.850006   \n",
      "2015-12-21  5637670.0  0.000202  483.172504  483.956253  495.950012   \n",
      "2015-12-22  5293656.0 -0.004838  485.492502  484.795003  496.049988   \n",
      "\n",
      "                 Lag_2  Direction  \n",
      "Date                               \n",
      "2015-12-16  477.549988          1  \n",
      "2015-12-17  487.950012          1  \n",
      "2015-12-18  489.325012          0  \n",
      "2015-12-21  504.850006          1  \n",
      "2015-12-22  495.950012          0  \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_20/4171118977.py:5: FutureWarning: The default fill_method='pad' in Series.pct_change is deprecated and will be removed in a future version. Either fill in any non-leading NA values prior to calling pct_change or specify 'fill_method=None' to not fill NA values.\n",
      "  df['Return'] = df['Close'].pct_change()\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# 2. Feature Engineering\n",
    "# Calculate daily returns\n",
    "df['Return'] = df['Close'].pct_change()\n",
    "\n",
    "# Create moving averages as features\n",
    "df['SMA_10'] = df['Close'].rolling(window=10).mean()\n",
    "df['SMA_20'] = df['Close'].rolling(window=20).mean()\n",
    "\n",
    "# Lag features\n",
    "df['Lag_1'] = df['Close'].shift(1)\n",
    "df['Lag_2'] = df['Close'].shift(2)\n",
    "\n",
    "# Drop NaN values from the new features\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Define the target: 1 if price increased, 0 if decreased or stayed the same\n",
    "df['Direction'] = np.where(df['Return'] > 0, 1, 0)\n",
    "\n",
    "# Display the updated DataFrame\n",
    "print(df.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d0a9d553",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T21:23:44.563860Z",
     "iopub.status.busy": "2024-07-03T21:23:44.563502Z",
     "iopub.status.idle": "2024-07-03T21:23:45.970009Z",
     "shell.execute_reply": "2024-07-03T21:23:45.968671Z"
    },
    "papermill": {
     "duration": 1.413705,
     "end_time": "2024-07-03T21:23:45.972442",
     "exception": false,
     "start_time": "2024-07-03T21:23:44.558737",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (955, 4), y_train shape: (955,)\n",
      "X_test shape: (239, 4), y_test shape: (239,)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# 3. Preprocessing\n",
    "# Features for the model\n",
    "features = ['SMA_10', 'SMA_20', 'Lag_1', 'Lag_2']\n",
    "X = df[features]\n",
    "y = df['Direction']\n",
    "\n",
    "# Standardize the features\n",
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(X)\n",
    "\n",
    "# 4. Train/Test Split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42, shuffle=False)\n",
    "\n",
    "# Display shapes of train and test sets\n",
    "print(f\"X_train shape: {X_train.shape}, y_train shape: {y_train.shape}\")\n",
    "print(f\"X_test shape: {X_test.shape}, y_test shape: {y_test.shape}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "96136a22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T21:23:45.981614Z",
     "iopub.status.busy": "2024-07-03T21:23:45.980603Z",
     "iopub.status.idle": "2024-07-03T21:23:46.174668Z",
     "shell.execute_reply": "2024-07-03T21:23:46.173431Z"
    },
    "papermill": {
     "duration": 0.201303,
     "end_time": "2024-07-03T21:23:46.177301",
     "exception": false,
     "start_time": "2024-07-03T21:23:45.975998",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM model trained with parameters:\n",
      "{'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'linear', 'max_iter': -1, 'probability': False, 'random_state': None, 'shrinking': True, 'tol': 0.001, 'verbose': False}\n",
      "Training accuracy: 0.52\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "\n",
    "# 5. Train the SVM model\n",
    "cls = SVC(kernel='linear')  # You can experiment with different kernels\n",
    "cls.fit(X_train, y_train)\n",
    "\n",
    "# Print model parameters and accuracy on training set\n",
    "print(f\"SVM model trained with parameters:\\n{cls.get_params()}\")\n",
    "print(f\"Training accuracy: {cls.score(X_train, y_train):.2f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d9d86bef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T21:23:46.186181Z",
     "iopub.status.busy": "2024-07-03T21:23:46.185772Z",
     "iopub.status.idle": "2024-07-03T21:23:46.215232Z",
     "shell.execute_reply": "2024-07-03T21:23:46.214034Z"
    },
    "papermill": {
     "duration": 0.037564,
     "end_time": "2024-07-03T21:23:46.218558",
     "exception": false,
     "start_time": "2024-07-03T21:23:46.180994",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test accuracy: 0.51\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00       118\n",
      "           1       0.51      1.00      0.67       121\n",
      "\n",
      "    accuracy                           0.51       239\n",
      "   macro avg       0.25      0.50      0.34       239\n",
      "weighted avg       0.26      0.51      0.34       239\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "\n",
    "# 6. Prediction\n",
    "y_pred = cls.predict(X_test)\n",
    "\n",
    "# 7. Evaluate the Model\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f'Test accuracy: {accuracy:.2f}')\n",
    "print(classification_report(y_test, y_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7417ac2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T21:23:46.227850Z",
     "iopub.status.busy": "2024-07-03T21:23:46.227459Z",
     "iopub.status.idle": "2024-07-03T21:23:46.285337Z",
     "shell.execute_reply": "2024-07-03T21:23:46.284219Z"
    },
    "papermill": {
     "duration": 0.065492,
     "end_time": "2024-07-03T21:23:46.287773",
     "exception": false,
     "start_time": "2024-07-03T21:23:46.222281",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              Return  Predicted_Signal  Strategy_Return\n",
      "Date                                                   \n",
      "2015-12-16  0.002818                 1              NaN\n",
      "2015-12-17  0.031727                 1         0.031727\n",
      "2015-12-18 -0.017629                 1        -0.017629\n",
      "2015-12-21  0.000202                 1         0.000202\n",
      "2015-12-22 -0.004838                 1        -0.004838\n"
     ]
    }
   ],
   "source": [
    "# Add predictions to the DataFrame\n",
    "df['Predicted_Signal'] = cls.predict(scaler.transform(X))\n",
    "\n",
    "# 8. Calculate Strategy Returns\n",
    "# Shift the 'Predicted_Signal' by 1 to use the previous day's signal for trading\n",
    "df['Strategy_Return'] = df['Return'] * df['Predicted_Signal'].shift(1)\n",
    "\n",
    "# Display the DataFrame with strategy returns\n",
    "print(df[['Return', 'Predicted_Signal', 'Strategy_Return']].head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e61d07ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T21:23:46.297336Z",
     "iopub.status.busy": "2024-07-03T21:23:46.296876Z",
     "iopub.status.idle": "2024-07-03T21:23:46.790213Z",
     "shell.execute_reply": "2024-07-03T21:23:46.789044Z"
    },
    "papermill": {
     "duration": 0.500963,
     "end_time": "2024-07-03T21:23:46.792688",
     "exception": false,
     "start_time": "2024-07-03T21:23:46.291725",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plot cumulative returns\n",
    "df['Cumulative_Market_Return'] = (df['Return'] + 1).cumprod()\n",
    "df['Cumulative_Strategy_Return'] = (df['Strategy_Return'] + 1).cumprod()\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(df.index, df['Cumulative_Market_Return'], label='Market Return', color='blue')\n",
    "plt.plot(df.index, df['Cumulative_Strategy_Return'], label='Strategy Return', color='red')\n",
    "plt.title('Cumulative Returns')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Cumulative Return')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 980888,
     "sourceId": 1657016,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.857534,
   "end_time": "2024-07-03T21:23:47.420427",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-03T21:23:40.562893",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
